@page "/electors"
@using System.ComponentModel.DataAnnotations
@using Election.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ApplicationDbContext DbContext

<PageTitle>Electors</PageTitle>

<h3 class="text-center">Electors</h3>
<div class="card">
    <div class="card-body">
        <h4 class="card-title">Add Elector</h4>
        <EditForm Model="@Input" OnValidSubmit="HandleValidSubmit" FormName="NomineeForm">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger"/>

            <div class="form-group row">
                <label for="firstName" class="col-sm-2 col-form-label">First Name</label>
                <div class="col-sm-4">
                    <InputText id="firstName" class="form-control mb-2" @bind-Value="Input.FirstName"/>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="lastName" class="col-sm-2 col-form-label">Last Name</label>
                <div class="col-sm-4">
                    <InputText id="lastName" class="form-control mb-2" @bind-Value="Input.LastName"/>
                    <ValidationMessage For="() => Input.LastName" class="text-danger"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="phoneNumber" class="col-sm-2 col-form-label">Phone Number</label>
                <div class="col-sm-4">
                    <InputText id="phoneNumber" class="form-control mb-2" @bind-Value="Input.PhoneNumber"/>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
                </div>
            </div>
            <div class="form-group row">
                <label for="emailAddress" class="col-sm-2 col-form-label">Email Address</label>
                <div class="col-sm-4">
                    <InputText id="emailAddress" class="form-control mb-2" @bind-Value="Input.EmailAddress"/>
                    <ValidationMessage For="() => Input.EmailAddress" class="text-danger"/>
                </div>
            </div>

            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </EditForm>
    </div>
</div>

<hr/>

<h3 class="text-center">Elector List</h3>

@if (electors == null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Phone Number</th>
            <th>Email Address</th>
            <th>Password</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var n in electors)
        {
            <tr>
                <td>@n.FirstName</td>
                <td>@n.LastName</td>
                <td>@n.PhoneNumber</td>
                <td>@n.EmailAddress</td>
                <td>@n.Password</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => DeleteElector(n)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new InputModel();
    private List<Elector> electors;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            electors = await DbContext.Electors.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading electors: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Generate random password
            var randomPassword = GenerateRandomPassword();

            // Create ApplicationUser
            var user = new ApplicationUser
            {
                UserName = Input.EmailAddress,
                Email = Input.EmailAddress
            };
            var result = await UserManager.CreateAsync(user, randomPassword);
            if (!result.Succeeded)
            {
                errorMessage = $"Error creating user: {string.Join(", ", result.Errors.Select(e => e.Description))}";
                return;
            }

            // Automatically confirm the user's email
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            var confirmResult = await UserManager.ConfirmEmailAsync(user, code);
            if (!confirmResult.Succeeded)
            {
                errorMessage = $"Error confirming email: {string.Join(", ", confirmResult.Errors.Select(e => e.Description))}";
                return;
            }

            // Optional: Email the user their password
            var emailContent = $"Welcome to the Election App.\n\nYour login credentials are:\nEmail: {Input.EmailAddress}\nPassword: {randomPassword}\n\nPlease change your password after logging in.";
         //   await EmailSender.SendConfirmationLinkAsync(Input.EmailAddress, "Your Account Has Been Created", emailContent);
            // Create Elector
            var elector = new Elector
            {
                FirstName = Input.FirstName,
                LastName = Input.LastName,
                PhoneNumber = Input.PhoneNumber,
                EmailAddress = Input.EmailAddress,
                Password = randomPassword
            };
            DbContext.Electors.Add(elector);
            await DbContext.SaveChangesAsync();

            electors = await DbContext.Electors.ToListAsync();
            Input = new InputModel(); // Reset the form
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding nominee: {ex.Message}";
        }
    }

    private async Task DeleteElector(Elector nominee)
    {
        try
        {
            DbContext.Electors.Remove(nominee);
            await DbContext.SaveChangesAsync();
            electors = await DbContext.Electors.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting nominee: {ex.Message}";
        }
    }

    private string GenerateRandomPassword()
    {
        const int length = 12;
        const string upperChars = "ABCDEFGHJKLMNOPQRSTUVWXYZ";
        const string lowerChars = "abcdefghijklmnopqrstuvwxyz";
        const string digitChars = "0123456789";
        const string specialChars = "!@#$%^&*()_+";
        const string allChars = upperChars + lowerChars + digitChars + specialChars;

        var random = new Random();
        var passwordChars = new List<char>
        {
            upperChars[random.Next(upperChars.Length)],
            lowerChars[random.Next(lowerChars.Length)],
            digitChars[random.Next(digitChars.Length)],
            specialChars[random.Next(specialChars.Length)]
        };

        for (var i = passwordChars.Count; i < length; i++)
        {
            passwordChars.Add(allChars[random.Next(allChars.Length)]);
        }

        // Shuffle the characters to avoid pattern
        passwordChars = passwordChars.OrderBy(x => random.Next()).ToList();
        return new string(passwordChars.ToArray());
    }

    public class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = string.Empty;

        [Required]
        [Phone]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        [Display(Name = "Email Address")]
        public string EmailAddress { get; set; } = string.Empty;
    }

}